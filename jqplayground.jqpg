jq '
.x?
'
{
    "a": 1,
    "b": 2,
    "c": [
        { 
            "key": 10,
            "value": [1, 2, 3]
        },
        { 
            "key": 20,
            "value": [4, 5, 6]
        },
        { 
            "key": 30,
            "value": [7, 8, 9]
        }
    ]
}

jq '
length'
{ 
    "a": 30
}

jq '.[] + .[]'
[1, 2, 3]

jq -n '[range(1; 4)] | .[] + .[]'

jq -c '
.[.[] - 1]
'
[1, 2, 3]

jq -c '([2] + .) as $x| range(3) | $x | add'
[1, 2, 3]

jq '.b.c = 3, .'
{ "a": 1, "b": { "c": 2 }}

jq '. + { b: { c: 3} }, .'
{ "a": 1, "b": { "c": 2 }}

jq '.b | paths(..)'
{ "a": 1, "b": { "c": 2, "d": [1, 2, 3, 4] }}

jq '
def has_keys(expected): 
    (. | keys) as $keys |
        ($keys - expected | length) == 0 and (expected - $keys | length) == 0;

def is(type):
    has_keys(type | .keys | keys);

def person:
    {
        "type": "object",
        "keys": { 
            "age": { "type" : "number" }, 
            "name": { "type" : "string" }
        }
    };

.[] | is(person)
'
[
    {"age": 1, "name": "c"},
    {"age": 2, "name": "d", "extra": 2} 
]

jq -n 'range(3) as $test | range(3) as $test2 | [$test, $test2]'

jq -n '
def x(test1; test2): [test1, test2];

range(3) | x(.;.)'

jq -n '
def x(test1; test2): [test1, test2];

[range(1; 4)] | x(.[];.)'

jq -n '
def test: . + 2;
range(3) | test
'

jq ''
1

jq -n 'range(3) as $test | [$test]'

jq -n '[1, 2] | .[] += 2'

jq -n '1 | . |= . + range(1; 3)'

jq -n '{ a: 1, b: 2} | .[] |= . + 1'

jq -n 'range(3) | null'

jq -n '[1, 2] | (.[0] += 2 | .[0]), .[0]'

jq -n '1, 2 as $test | $test + 2'

jq -n '{a:1}'

jq -n '{a:1} | ."a"'

jq -n '["a", "b"] | .[0] < .[1]'

jq -n 'if range(3) | . + 2 then 1, 2 | . + 2 else empty end'

jq -n 'if empty | . + 2 then 1, 2 | . + 2 else empty end'

jq -n 'def plus(a; b): [a, b]; plus(1; 2)'

jq -n 'plus(1; 2)'

jq -n 'def test:1; test'

jq -n 'range(1;10;2)'

jq -n 'range(2, 3;5,6)'

jq -n 'range(2;6;2)'

jq -n 'range(2;6.5;.5)'

jq -n '[1, 2] | .0'

jq -n '{a:1, b:2} | length'

jq -n '"test" | length'

jq -n 'limit(2, 3; range(4))'

jq -n '[1, 2, 3] | .[-3,-2:2]'

jq -n '[1, 2, 3] | .[range(-2; 1)]'

jq -n '"test" | .[-1]'

jq -n '-2: 0'

jq -n '[1, 2, 3] | .[4]'

jq -n '{} | .[0]'

jq '.[] | [. + 2]'
[1, 2, 3]

jq '(def x: 1; .)'
1

jq '.[10]'
[1, 2, 3]

jq 'keys'
{"a":2}

jq 'keys'
10

jq '(. | del(.a.c)), .'
{
    "a": {
        "c": 3
    },
    "b": 2
}

jq '.x'
{
    "a": {
        "c": 3
    },
    "b": 2,
    "x": null
}

jq '(. + 2, . + 3, .x, . + 4)?'
100

jq -n '[1, 2, 3] | .[10:15]'

jq -n '[1, 2, 3] | .[1, 2:]'

jq -n '{} | .[1, 2:]?'

jq -n '{a:1, b:[2, {c:3}]} | ..'

jq -n '[1, 2, 3] | debug'