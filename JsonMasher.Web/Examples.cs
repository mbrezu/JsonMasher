namespace JsonMasher.Web;

public static class Examples
{
    private static readonly string[] data =
    [
        """
identity
------
.
------
1 2 3 4 5
""",
        """
selection
------
[.a.b, .c]
------
{"a": {"b": 200}, "c": "test"}
{"a": {"b": 400}, "c": "test"}
{"a": {"b": 600}, "c": "test"}
{"a": {"b": 800}, "c": "test"}
{"a": {"b": 1000}, "c": "test"}
""",
        """
construct array
------
[.[] |. + 2]
------
[1, 2, 3, 4, 5]
""",
        """
construct object
------
.[] | { a: ., b: . + 2 }
------
[1, 2, 3, 4, 5]
""",
        """
range
------
range(10) | . * .
------
null
""",
        """
limit
------
limit(3; range(10))
------
null
""",
        """
if-then-else
------
.[] | if . >= 2 and . <= 4 then . else empty end
------
[1, 2, 3, 4, 5]
""",
        """
function definition
------
def map(x): [.[] | x];
def select(x): if x then . else empty end;

[map(select(. > 2))]
------
[1, 2, 3, 4, 5]
""",
        """
slices
------
.[1:3], .[1:], .[-1:], .[:-1], .[-3:-2]
------
[1, 2, 3, 4, 5]
""",
        """
debug
------
.[] | if . <= 2 then debug else . end
------
[1, 2, 3]
""",
        """
recurse
------
..
------
{
  "a": [1, 2, 3],
  "b": "test",
  "c": [
    1,
    {
      "d": 1,
      "e": [null, true, false]
    }
  ]
}
""",
        """
alternatives
------
# '//' returns the first part (without null and false),
# or the second part if the first is all null and false values

empty // 1,
(null, false, empty) // 1,
(null, false, 2) // 1
------
null
""",
        """
error suppression
------
0 | (1, 2, .[], 3, 4)?
------
null
""",
        """
try/catch
------
# catch will replace the error with the value of its block,
# applied to the error message

0 | try (1, 2, .[], 3, 4) catch . * 2
------
null
""",
        """
string division
------
# string division is string splitting

"a b c" / " "
------
null
""",
        """
dictionary multiplication
------
# dictionary multiplication is recursive merge of dictionaries

{ a: { b: { f: 4, g: 3 } }, c: { d: 3 }, e: 4 } * { a: { b: { f: 5 } }, e: 8 }
------
null
""",
        """
path
------
# path returns the array of paths generated by the path expression and input

path(..)
------
{ "a": 1, "b": 2, "c": [1, 2, 3]}
""",
        """
sort_by
------
sort_by(.a)
------
[{"a": 2, "b": 5}, {"a": 1, "b": 3}, { "a": 3, "b": 2}]
""",
        """
reduce
------
reduce .[] as $n (0; . + $n)
------
[1, 2, 3]
""",
        """
foreach
------
foreach .[] as $n (0; . + $n; . * .)
------
[1, 2, 3]
""",
    ];

    public record Example(string Name, string Program, string Input)
    {
        public static Example FromString(string str)
        {
            var parts = str.Split("------");
            return new Example(parts[0].Trim(), parts[1].Trim(), parts[2].Trim());
        }
    }

    public static string[] ExampleNames => [.. data.Select(e => Example.FromString(e).Name)];

    public static Example? GetExample(string name)
    {
        return data.Select(Example.FromString).FirstOrDefault(e => e.Name == name);
    }
}
